version: '3'

services:
  zookeeper:
      image: confluentinc/cp-zookeeper:7.4.0
      hostname: zookeeper
      container_name: zookeeper1
      ports:
        - "2181:2181"
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000
      healthcheck:
        test: ['CMD', 'bash', '-c', "echo 'ruok' | nc localhost 2181"]
        interval: 10s
        timeout: 5s
        retries: 5
      networks:
        - confluent

  broker:
    image: confluentinc/cp-server:7.4.0
    hostname: broker
    container_name: broker1
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'false'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    networks:
      - confluent
    healthcheck:
      test: [ "CMD", "bash", "-c", 'nc -z localhost 9092' ]
      interval: 10s
      timeout: 5s
      retries: 5

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    hostname: schema-registry
    container_name: schema-registry1
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - confluent
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/" ]
      interval: 30s
      timeout: 10s
      retries: 5
  
  control-center:
    image: confluentinc/cp-enterprise-control-center:7.4.0
    hostname: control-center
    container_name: control-center
    depends_on:
      broker:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONFLUENT_METRICS_ENABLE: 'false'
      PORT: 9021
    networks:
      - confluent
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9021/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  webserver:
    build:
      context: .
      dockerfile: Dockerfile
    image: apache/airflow:2.6.0-python3.9
    command: webserver
    entrypoint: ['/opt/airflow/script/entrypoint.sh']
    depends_on:
      - postgres
    environment:
      - LOAD_EX=n
      - EXECUTOR=Local
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__WEBSERVER__SECRET_KEY=this_is_a_very_secured_key
      - AIRFLOW_CONN_SPARK_DEFAULT=spark://spark-master:7077
    logging:
      options:
        max-size: 10m
        max-file: "3"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./script/entrypoint.sh:/opt/airflow/script/entrypoint.sh
      - ./requirements.txt:/opt/airflow/requirements.txt
      - ./dags/youtube_elt/load:/opt/airflow/dags/youtube_elt/load
      - ./dags/youtube_elt/transform:/opt/airflow/dags/youtube_elt/transform
      - ./logs:/opt/airflow/logs
      - ./conf/hive:/opt/airflow/conf/hive
    ports:
      - "8080:8080"
    healthcheck:
      test: ['CMD-SHELL', "[ -f /opt/airflow/airflow-webserver.pid ]"]
      interval: 60s
      timeout: 30s
      retries: 10
      start_period: 180s 
    networks:
      - confluent

  scheduler:
    build: 
      context: .
      dockerfile: Dockerfile
    image: apache/airflow:2.6.0-python3.9
    depends_on:
      webserver:
        condition: service_healthy
    volumes:
      - ./dags:/opt/airflow/dags
      - ./script/entrypoint.sh:/opt/airflow/script/entrypoint.sh
      - ./requirements.txt:/opt/airflow/requirements.txt
      - ./dags/youtube_elt/load:/opt/airflow/dags/youtube_elt/load
      - ./dags/youtube_elt/transform:/opt/airflow/dags/youtube_elt/transform
      - ./logs:/opt/airflow/logs
      - ./conf/hive:/opt/airflow/conf/hive
    environment:
      - LOAD_EX=n
      - EXECUTOR=Local
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__WEBSERVER__SECRET_KEY=this_is_a_very_secured_key
      - AIRFLOW_CONN_SPARK_DEFAULT=spark://spark-master:7077
    command: bash -c "pip install -r ./requirements.txt && airflow db upgrade && airflow scheduler"
    networks:
      - confluent

  postgres:
    image: postgres:14.0
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    logging:
      options:
        max-size: 10m
        max-file: "3"
    networks:
      - confluent

  spark-master:
    image: bitnami/spark:3.4.0
    command: bin/spark-class org.apache.spark.deploy.master.Master
    ports:
      - "9090:8080"
      - "7077:7077"
    environment:
      CORE_CONF_fs_defaultFS: hdfs://namenode1:9000
      SPARK_MODE: master
    volumes:
      - ./conf/hadoop:/opt/bitnami/spark/conf
      - ./dags/youtube_elt/load:/opt/bitnami/spark/jobs/load
      - ./dags/youtube_elt/transform:/opt/bitnami/spark/jobs/transform
      - ./conf/hive:/opt/bitnami/spark/conf
    networks:
      - confluent


  spark-worker:
    image: bitnami/spark:3.4.0
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
      - spark-master
    volumes:
      - ./output:/opt/bitnami/spark/output
      - ./conf/hadoop:/opt/bitnami/spark/conf
      - ./dags/youtube_elt/load:/opt/bitnami/spark/jobs/load
      - ./dags/youtube_elt/transform:/opt/bitnami/spark/jobs/transform
      - ./conf/hive:/opt/bitnami/spark/conf
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 2g
      SPARK_MASTER_URL: spark://spark-master:7077
      CORE_CONF_fs_defaultFS: hdfs://namenode1:9000
    networks:
      - confluent
    
  hadoop-namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode1
    environment:
      - CLUSTER_NAME=test
      - CORE_CONF_fs_defaultFS=hdfs://namenode1:9000
      - CORE_CONF_hadoop_http_staticuser_user=root
      - HDFS_CONF_dfs_webhdfs_enabled=true
      - HDFS_CONF_dfs_permissions_enabled=false
      - HDFS_CONF_dfs_namenode_datanode_registration_ip___hostname___check=false
    ports:
      - "9870:9870"  
      - "9000:9000"  
    volumes:
      - hdfs_namenode:/hadoop/dfs/name
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9870"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - confluent
    

  hadoop-datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode1
    environment:
      - CLUSTER_NAME=test
      - CORE_CONF_fs_defaultFS=hdfs://namenode1:9000
      - CORE_CONF_hadoop_http_staticuser_user=root
      - HDFS_CONF_dfs_datanode_data_dir=/hadoop/dfs/data
      - HDFS_CONF_dfs_webhdfs_enabled=true
      - HDFS_CONF_dfs_permissions_enabled=false
    depends_on:
      hadoop-namenode:
        condition: service_healthy
    volumes:
      - hdfs_datanode:/hadoop/dfs/data
    networks:
      - confluent

  jupyter:
    image: jupyter/pyspark-notebook:spark-3.4.0
    container_name: jupyter1
    ports:
      - "8888:8888"
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - PYSPARK_PYTHON=python3
      - PYSPARK_DRIVER_PYTHON=jupyter
      - PYSPARK_DRIVER_PYTHON_OPTS='notebook --no-browser --ip=0.0.0.0 --allow-root --NotebookApp.token='
      - HADOOP_CONF_DIR=/opt/hadoop/etc/hadoop
    depends_on:
      - spark-master
    networks:
      - confluent
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./conf/hadoop:/opt/hadoop/etc/hadoop
  

  hive-metastore-postgresql:
    image: bde2020/hive-metastore-postgresql:2.3.0
    container_name: hive-metastore-db  
    volumes:
      - ./metastore-postgresql/postgresql/data:/var/lib/postgresql/data
    ports:
      - "5432:5432"  
    environment:
      - POSTGRES_USER=hive
      - POSTGRES_PASSWORD=hive
      - POSTGRES_DB=metastore
    depends_on:
      - hadoop-datanode
    networks:
      - confluent

  hive-metastore:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-metastore
    depends_on:
      - hadoop-namenode
      - hadoop-datanode
      - hive-metastore-postgresql
    command: /opt/hive/bin/hive --service metastore
    env_file:
      - ./hadoop-hive.env
    environment:
      SERVICE_NAME: metastore
    volumes:
      - ./conf/hadoop:/opt/hive/conf/hadoop
      - ./conf/hive:/opt/hive/conf/hive
    ports:
      - "9083:9083"
    networks:
      - confluent

  hive-server:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-server
    depends_on:
      - hive-metastore
    env_file:
      - ./hadoop-hive.env
    environment:
      HIVE_CORE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://hive-metastore-db:5432/metastore"
      SERVICE_PRECONDITION: "hive-metastore:9083"
    volumes:
      - ./conf/hadoop:/opt/hive/conf/hadoop
      - ./conf/hive:/opt/hive/conf/hive
    ports:
      - "10000:10000" 
    networks:
      - confluent

  superset:
    build: 
      context: ./superset
      dockerfile: dockerfile
    image: apache/superset:latest  
    container_name: superset
    environment:
      - ADMIN_USERNAME=admin
      - ADMIN_EMAIL=xuanphuc11112004@gmail.com
      - ADMIN_PASSWORD=admin
    ports:
      - '8088:8088'
    networks:
      - confluent    


  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.17.14
  #   container_name: elasticsearch1
  #   environment:
  #     - discovery.type=single-node
  #     - ES_JAVA_OPTS=-Xms512m -Xmx512m
  #     - xpack.security.enabled=false
  #     - xpack.security.transport.ssl.enabled=false
  #   ports:
  #     - "9200:9200"
  #   networks:
  #     - confluent
  #   healthcheck:
  #     test: curl -s http://localhost:9200/_cluster/health | grep -q '"status":"green"'
  #     interval: 20s
  #     timeout: 10s
  #     retries: 10

  # kibana:
  #   image: docker.elastic.co/kibana/kibana:7.17.14
  #   container_name: kibana1
  #   environment:
  #     ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
  #   ports:
  #     - "5601:5601"
  #   depends_on:
  #     - elasticsearch
  #   networks:
  #     - confluent



  # cassandra_db:
  #   image: cassandra:latest
  #   container_name: cassandra
  #   hostname: cassandra
  #   ports:
  #     - "9042:9042"
  #   environment:
  #     - MAX_HEAP_SIZE=512M
  #     - HEAP_NEWSIZE=100M
  #     - CASSANDRA_USERNAME=cassandra
  #     - CASSANDRA_PASSWORD=cassandra
  #   networks:
  #     - confluent
networks:
  confluent:
    driver: bridge

volumes:
  elasticsearch_data:
  hdfs_namenode:
  hdfs_datanode:
  hive_pgdata: